import csv
import time
from urllib.parse import urlencode, urljoin, quote
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager


# Dictionnaire des niveaux d'√©tudes ‚Üí valeur d'URL attendue par Onisep
NIVEAU_MAPPING = {
    "": "",  # Aucun filtre
    "1": "apr√®s bac/Bac +1 √† +2",
    "3": "apr√®s bac/Bac +3",
    "5": "apr√®s bac/Bac +4 √† +5",
    "7": "apr√®s bac/Bac +6 et +",
}

def input_non_empty(prompt):
    while True:
        value = input(prompt).strip()
        if value:
            return value
        print("Ce champ est obligatoire.")


def create_driver():
    options = webdriver.ChromeOptions()
    options.add_argument("--headless=new")  # Comment√© pour debug
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
    return webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)


def encoder_text_personnalise(text):
    # Garde les accents, encode seulement espace et &
    return text.replace(" ", "%20").replace("&", "%26")


def construire_url(mot_cle, niveau_code):
    base_url = "https://www.onisep.fr/recherche"

    niveau_label = NIVEAU_MAPPING.get(niveau_code.strip(), "")
    if not niveau_label:
        niveau_label = "apr√®s bac"

    niveau_encoded = quote(niveau_label)

    query_params = {
        "context": "formation",
    }
    query_string = urlencode(query_params)

    mot_cle_encode = encoder_text_personnalise(mot_cle)
    niveau_param = f"sf[niveau_enseignement_mid][]={niveau_encoded}"

    url = f"{base_url}?{query_string}&{niveau_param}&text={mot_cle_encode}"
    return url


def rechercher_formations(url, max_results=20):
    base_url = "https://www.onisep.fr"
    driver = create_driver()

    formations = []
    page = 1

    try:
        while len(formations) < max_results and len(formations) < 50:
            paged_url = url+"&page="+str(page)
            print(f"\nüîÑ Chargement page {page} : {paged_url}")
            driver.get(paged_url)
            time.sleep(3)

            # Rechercher les lignes du tableau
            rows = driver.find_elements(By.CSS_SELECTOR, "tbody tr")
            print(f"üìä {len(rows)} lignes trouv√©es sur la page {page}")
            
            if not rows:
                print("‚ùå Aucune ligne trouv√©e, fin de la recherche")
                break

            page_count = 0
            for row in rows:
                try:
                    a_tag = row.find_element(By.TAG_NAME, "a")
                    title = a_tag.text.strip()
                    link = urljoin(base_url, a_tag.get_attribute("href"))
                    
                    formations.append({
                        "titre": title,
                        "lien": link
                    })
                    page_count += 1
                    print(f"   ‚úÖ Formation {len(formations)}: {title}")
                    
                    if len(formations) >= max_results or len(formations) >= 50:
                        break
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur ligne : {e}")
                    continue
                    
            if page_count == 0:
                print("‚ùå Aucune formation trouv√©e sur cette page, arr√™t")
                break
                
            page += 1

    except Exception as e:
        print(f"‚ùå Erreur globale lors de la recherche : {e}")
    finally:
        driver.quit()

    return formations


def renseigner_localisation(driver, localisation):
    if not localisation:
        return
        
    try:
        print(f"üîç Tentative de filtrage par localisation : {localisation}")
        wait = WebDriverWait(driver, 10)
        
        # Plusieurs s√©lecteurs possibles pour le champ de localisation
        selectors = [
            "input.geo-city",
            "input[name='search-ui-geo-city']",
            "input[placeholder*='ville']",
            "input[placeholder*='localisation']"
        ]
        
        input_geo = None
        for selector in selectors:
            try:
                input_geo = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
                print(f"‚úÖ Champ de localisation trouv√© avec : {selector}")
                break
            except:
                continue
                
        if not input_geo:
            print("‚ö†Ô∏è Champ de localisation non trouv√©, pas de filtrage")
            return
            
        # Remplir le champ
        input_geo.clear()
        time.sleep(1)
        input_geo.send_keys(localisation)
        time.sleep(2)
        
        # Chercher la liste d'autocompl√©tion
        try:
            driver.execute_script("arguments[0].scrollIntoView(true);", input_geo)
            autocomplete = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "div.autocomplete-list-wrapper")))
            time.sleep(1)
            autocomplete.click()
            print("‚úÖ Localisation s√©lectionn√©e via autocompl√©tion")
        except:
            # Si pas d'autocompl√©tion, valider avec Enter
            input_geo.send_keys(Keys.RETURN)
            print("‚úÖ Localisation valid√©e avec Enter")

        time.sleep(3)  # Attendre le filtrage
        
    except Exception as e:
        print(f"‚ùå Erreur lors du filtrage par localisation : {e}")


def extraire_infos_formation(driver, url, localisation):
    """Extrait les informations d√©taill√©es d'une formation"""
    # Initialiser le r√©sultat avec des valeurs par d√©faut
    result = {
        "dur√©e": "N/A",
        "nature": "N/A",
        "type": "N/A",
        "√©tablissements_conseill√©s": "N/A"
    }
    
    try:
        print(f"üîç Analyse de la formation : {url}")
        driver.get(url)
        time.sleep(5)  # Augmenter le d√©lai d'attente

        # Renseigner la localisation si fournie
        if localisation:
            renseigner_localisation(driver, localisation)
            time.sleep(3)

        # Extraire la dur√©e avec plusieurs s√©lecteurs
        print("üîç Recherche de la dur√©e...")
        duree_selectors = [
            "//div[contains(text(),'Dur√©e de la formation')]/strong",
            "//div[contains(text(),'Dur√©e')]/following-sibling::*/strong",
            "//strong[contains(text(),'an') or contains(text(),'mois') or contains(text(),'semestre')]",
            "//*[contains(text(),'Dur√©e')]/..//strong",
            "//*[contains(@class,'duration')]",
        ]
        
        for selector in duree_selectors:
            try:
                if selector.startswith("//"):
                    duree_elem = driver.find_element(By.XPATH, selector)
                else:
                    duree_elem = driver.find_element(By.CSS_SELECTOR, selector)
                result["dur√©e"] = duree_elem.text.strip()
                print(f"‚úÖ Dur√©e trouv√©e : {result['dur√©e']}")
                break
            except:
                continue

        # Extraire la nature avec plusieurs s√©lecteurs
        print("üîç Recherche de la nature...")
        nature_selectors = [
            "//div[contains(@class, 'tag')][.//span[contains(text(),'Nature de la formation')]]//li//strong",
            "//span[contains(text(),'Nature')]/following-sibling::strong",
            "//*[contains(text(),'Nature')]/..//strong",
            "//div[contains(text(),'Nature')]//strong",
        ]
        
        for selector in nature_selectors:
            try:
                nature_elem = driver.find_element(By.XPATH, selector)
                result["nature"] = nature_elem.text.strip()
                print(f"‚úÖ Nature trouv√©e : {result['nature']}")
                break
            except:
                continue

        # Extraire le type de formation
        print("üîç Recherche du type...")
        type_selectors = [
            "//div[contains(@class, 'tag') and .//text()[contains(.,'Type de formation')]]/span/strong",
            "//span[contains(text(),'Type')]/following-sibling::strong",
            "//*[contains(text(),'Type')]/..//strong",
            "//div[contains(text(),'Type')]//strong",
        ]
        
        for selector in type_selectors:
            try:
                type_elem = driver.find_element(By.XPATH, selector)
                result["type"] = type_elem.text.strip()
                print(f"‚úÖ Type trouv√© : {result['type']}")
                break
            except:
                continue

        # Extraire les √©tablissements
        print("üîç Recherche des √©tablissements...")
        etablissements = []
        table_selectors = [
            "table tbody tr",
            ".table tbody tr",
            "tbody tr",
            "[data-label] tr",
            ".establishment-list tr"
        ]
        
        for table_selector in table_selectors:
            try:
                time.sleep(2)
                table_rows = driver.find_elements(By.CSS_SELECTOR, table_selector)
                
                if table_rows:
                    print(f"üè´ {len(table_rows)} ligne(s) d'√©tablissement(s) trouv√©e(s) avec s√©lecteur : {table_selector}")
                    
                    for i, tr in enumerate(table_rows, 1):
                        try:
                            # Essayer diff√©rentes fa√ßons d'extraire les infos
                            nom_elem = tr.find_element(By.TAG_NAME, "a")
                            nom = nom_elem.text.strip()
                            
                            # Essayer diff√©rents s√©lecteurs pour la ville
                            ville = "N/A"
                            ville_selectors = [
                                'td[data-label="Commune"]',
                                'td[data-label="Ville"]',
                                '.commune',
                                '.ville'
                            ]
                            
                            for ville_sel in ville_selectors:
                                try:
                                    ville_elem = tr.find_element(By.CSS_SELECTOR, ville_sel)
                                    ville = ville_elem.text.strip()
                                    break
                                except:
                                    continue
                            
                            # Essayer diff√©rents s√©lecteurs pour le code postal
                            code_postal = "N/A"
                            cp_selectors = [
                                'td[data-label="Code postal"]',
                                'td[data-label="CP"]',
                                '.code-postal',
                                '.cp'
                            ]
                            
                            for cp_sel in cp_selectors:
                                try:
                                    cp_elem = tr.find_element(By.CSS_SELECTOR, cp_sel)
                                    code_postal = cp_elem.text.strip()
                                    break
                                except:
                                    continue
                            
                            if ville != "N/A" and code_postal != "N/A":
                                etablissement_info = f"{nom} ({ville}, {code_postal})"
                            else:
                                etablissement_info = nom
                                
                            etablissements.append(etablissement_info)
                            print(f"   üìç √âtablissement {i}: {etablissement_info}")
                            
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è Erreur √©tablissement {i}: {e}")
                            continue
                    
                    break  # Sortir de la boucle des s√©lecteurs si on a trouv√© des donn√©es
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur avec s√©lecteur {table_selector}: {e}")
                continue
        
        result["√©tablissements_conseill√©s"] = " | ".join(etablissements) if etablissements else "N/A"
        print(f"‚úÖ {len(etablissements)} √©tablissement(s) r√©cup√©r√©(s)")
        
        print(f"üìã R√©sum√© extraction :")
        print(f"   - Dur√©e: {result['dur√©e']}")
        print(f"   - Nature: {result['nature']}")
        print(f"   - Type: {result['type']}")
        print(f"   - √âtablissements: {len(etablissements)} trouv√©(s)")
        
        return result

    except Exception as e:
        print(f"‚ùå Erreur lors de l'extraction des infos : {e}")
        print(f"‚ùå Type d'erreur : {type(e).__name__}")
        return result  # Retourner le r√©sultat avec les valeurs par d√©faut


def export_csv(data, filename="formations_onisep.csv"):
    if not data:
        print("‚ùå Aucune donn√©e √† exporter.")
        return
    
    print(f"\nüìä Pr√©paration de l'export de {len(data)} formation(s)...")
    
    # Debugging : afficher les donn√©es avant export
    print("üîç DEBUG - Aper√ßu des donn√©es :")
    for i, item in enumerate(data[:2]):  # Afficher les 2 premiers √©l√©ments
        print(f"   Formation {i+1}: {item}")
    
    # V√©rifier que les donn√©es ont bien des cl√©s
    if not data or not data[0]:
        print("‚ùå Erreur : les donn√©es sont vides")
        return
        
    # S'assurer que toutes les formations ont les m√™mes cl√©s
    all_keys = set()
    for formation in data:
        if isinstance(formation, dict):
            all_keys.update(formation.keys())
    
    if not all_keys:
        print("‚ùå Erreur : aucune cl√© trouv√©e dans les donn√©es")
        return
    
    # Standardiser les donn√©es pour avoir toutes les cl√©s
    standardized_data = []
    for formation in data:
        if isinstance(formation, dict):
            standardized_formation = {}
            for key in all_keys:
                standardized_formation[key] = formation.get(key, "N/A")
            standardized_data.append(standardized_formation)
    
    try:
        # Cr√©er le fichier CSV
        with open(filename, mode="w", newline="", encoding="utf-8") as file:
            fieldnames = list(all_keys)
            print(f"üìù Colonnes : {fieldnames}")
            
            writer = csv.DictWriter(file, fieldnames=fieldnames, delimiter=';')
            writer.writeheader()
            
            for i, row in enumerate(standardized_data, 1):
                writer.writerow(row)
                print(f"   ‚úÖ Ligne {i} √©crite : {row.get('titre', 'N/A')}")
            
        print(f"\nüéâ Export r√©ussi ! Fichier : {filename}")
        print(f"üìÅ Nombre de formations export√©es : {len(standardized_data)}")
        
        # V√©rifier que le fichier a √©t√© cr√©√©
        import os
        if os.path.exists(filename):
            size = os.path.getsize(filename)
            print(f"üìä Taille du fichier : {size} octets")
        else:
            print("‚ùå Le fichier n'a pas √©t√© cr√©√©")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'export : {e}")
        print(f"Type d'erreur : {type(e).__name__}")
        import traceback
        traceback.print_exc()


def main():
    print("=== Recherche de formations sur Onisep.fr ===")
    
    # Saisie des param√®tres
    mot_cle = input_non_empty("Mot-cl√© de recherche (ex: math√©matiques) : ")

    print("\nChoisis un niveau d'√©tude :")
    print("  (laisser vide pour aucun filtre)")
    print("  1 ‚Üí Bac +1 √† +2")
    print("  3 ‚Üí Bac +3")
    print("  4 ‚Üí Bac +4 √† +5")
    print("  6 ‚Üí Bac +6 et +")
    niveau = input("Ton choix (1, 3, 4, 6 ou vide) : ").strip()
    
    localisation = input("Entrez une ville ou une r√©gion (facultatif) : ").strip()
    
    max_results_str = input("Nombre max de r√©sultats (d√©faut = 3, max = 50) : ").strip()
    max_results = int(max_results_str) if max_results_str.isdigit() else 3
    max_results = min(max_results, 50)

    print(f"\nüîç Recherche en cours avec les param√®tres :")
    print(f"   - Mot-cl√© : {mot_cle}")
    print(f"   - Niveau : {niveau if niveau else 'Tous niveaux'}")
    print(f"   - Localisation : {localisation if localisation else 'Toute la France'}")
    print(f"   - Nombre max : {max_results}")

    # Construction de l'URL et recherche
    search_url = construire_url(mot_cle, niveau)
    print(f"\nüåê URL de recherche : {search_url}")
    
    # Recherche des formations
    print("\n" + "="*50)
    print("√âTAPE 1: RECHERCHE DES FORMATIONS")
    print("="*50)
    
    src_formations = rechercher_formations(search_url, max_results=max_results)
    
    if not src_formations:
        print("‚ùå Aucune formation trouv√©e.")
        return

    print(f"\n‚úÖ {len(src_formations)} formation(s) trouv√©e(s) :")
    for i, formation in enumerate(src_formations, 1):
        print(f"   {i}. {formation['titre']}")

    # Analyse d√©taill√©e
    print("\n" + "="*50)
    print("√âTAPE 2: ANALYSE D√âTAILL√âE")
    print("="*50)

    driver = create_driver()
    full_data = []

    try:
        for i, formation in enumerate(src_formations, 1):
            print(f"\nüìã === ANALYSE {i}/{len(src_formations)} ===")
            print(f"Formation : {formation['titre']}")
            print(f"URL : {formation['lien']}")
            
            # Extraction des infos d√©taill√©es
            infos_detaillees = extraire_infos_formation(driver, formation['lien'], localisation)
            
            # Fusion des donn√©es - CORRECTION ICI
            formation_complete = {
                "titre": formation["titre"],
                "lien": formation["lien"],
                "dur√©e": infos_detaillees["dur√©e"],
                "nature": infos_detaillees["nature"],
                "type": infos_detaillees["type"],
                "√©tablissements_conseill√©s": infos_detaillees["√©tablissements_conseill√©s"]
            }
            
            full_data.append(formation_complete)
            
            print(f"‚úÖ Analyse termin√©e pour : {formation['titre']}")
            print(f"‚úÖ Donn√©es ajout√©es : {formation_complete}")
            print("-" * 50)
            
            # Petite pause entre les requ√™tes
            time.sleep(2)

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Interruption par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse des formations : {e}")
        import traceback
        traceback.print_exc()
    finally:
        driver.quit()
        print("\nüîÑ WebDriver ferm√©")

    # Export des r√©sultats
    print("\n" + "="*50)
    print("√âTAPE 3: EXPORT DES DONN√âES")
    print("="*50)
    
    if full_data:
        print(f"üìä Donn√©es collect√©es pour {len(full_data)} formation(s)")
        print(f"üîç DEBUG - Exemple de donn√©es collect√©es :")
        if full_data:
            print(f"   {full_data[0]}")
        
        export_csv(full_data)
        print(f"\nüéâ Processus termin√© ! {len(full_data)} formation(s) analys√©e(s) et export√©e(s)")
    else:
        print("‚ùå Aucune donn√©e √† exporter")


if __name__ == "__main__":
    main()
